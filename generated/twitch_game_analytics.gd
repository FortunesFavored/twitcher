@tool
extends RefCounted

# CLASS GOT AUTOGENERATED DON'T CHANGE MANUALLY. CHANGES CAN BE OVERWRITTEN EASILY.

class_name TwitchGameAnalytics

## An ID that identifies the game that the report was generated for.
var game_id: String;
## The URL that you use to download the report. The URL is valid for 5 minutes.
var URL: String;
## The type of report.
var type: String;
## The reporting window’s start and end dates, in RFC3339 format.
var date_range: DateRange;

static func from_json(d: Dictionary) -> TwitchGameAnalytics:
	var result = TwitchGameAnalytics.new();
	if d.has("game_id") && d["game_id"] != null:
		result.game_id = d["game_id"];
	if d.has("URL") && d["URL"] != null:
		result.URL = d["URL"];
	if d.has("type") && d["type"] != null:
		result.type = d["type"];
	if d.has("date_range") && d["date_range"] != null:
		result.date_range = DateRange.from_json(d["date_range"]);
	return result;

func to_dict() -> Dictionary:
	var d: Dictionary = {};
	d["game_id"] = game_id;
	d["URL"] = URL;
	d["type"] = type;
	if date_range != null:
		d["date_range"] = date_range.to_dict();
	return d;

func to_json() -> String:
	return JSON.stringify(to_dict());

## The reporting window’s start and end dates, in RFC3339 format.
class DateRange extends RefCounted:
{for properties as property}
	## {property.description}
	var {property.field_name}: {property.type};
{/for}


	static func from_json(d: Dictionary) -> DateRange:
		var result = DateRange.new();
{for properties as property}
{if property.is_property_array}
		if d.has("{property.property_name}") && d["{property.property_name}"] != null:
			for value in d["{property.property_name}"]:
				result.{property.field_name}.append(value);
{/if}
{if property.is_property_typed_array}
		if d.has("{property.property_name}") && d["{property.property_name}"] != null:
			for value in d["{property.property_name}"]:
				result.{property.field_name}.append({property.array_type}.from_json(value));
{/if}
{if property.is_property_sub_class}
		if d.has("{property.property_name}") && d["{property.property_name}"] != null:
			result.{property.field_name} = {property.type}.from_json(d["{property.property_name}"]);
{/if}
{if property.is_property_basic}
		if d.has("{property.property_name}") && d["{property.property_name}"] != null:
			result.{property.field_name} = d["{property.property_name}"];
{/if}
{/for}
		return result;

	func to_dict() -> Dictionary:
		var d: Dictionary = {};
{for properties as property}
{if property.is_property_array}
		d["{property.property_name}"] = [];
		if {property.field_name} != null:
			for value in {property.field_name}:
				d["{property.property_name}"].append(value);
{/if}
{if property.is_property_typed_array}
		d["{property.property_name}"] = [];
		if {property.field_name} != null:
			for value in {property.field_name}:
				d["{property.property_name}"].append(value.to_dict());
{/if}
{if property.is_property_sub_class}
		if {property.field_name} != null:
			d["{property.property_name}"] = {property.field_name}.to_dict();
{/if}
{if property.is_property_basic}
		d["{property.property_name}"] = {property.field_name};
{/if}
{/for}
		return d;


	func to_json() -> String:
		return JSON.stringify(to_dict());

